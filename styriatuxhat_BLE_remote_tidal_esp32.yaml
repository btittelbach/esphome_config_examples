#===============================================================================
substitutions:
  device_name: styriatuxhatremote
  device_friendly_name: "Tidal EMF2022"
  ble_target_mac: <ble_target_mac>
  ble_target_uart_service_uuid: <ble_uart_uuid>
  ble_target_tx_characteristic_uuid: <tx_uuid>
  ble_target_rx_characteristic_uuid: <rx_uuid>
#===============================================================================

esphome:
  name: ${device_name}
  on_boot:
    component.update: tidal_display

esp32:
  board: esp32-s3-devkitc-1
  framework:
    #type: esp-idf
    type: arduino

logger:

# https://esphome.io/components/ble_client.html
ble_client:
  - mac_address: ${ble_target_mac}
    id: styria_tux_hat_ble_client

text_sensor:
  - platform: ble_client
    ble_client_id: styria_tux_hat_ble_client
    name: "styria_tux_hat_UART_response"
    id: styria_tux_hat_UART_response
    service_uuid: "${ble_target_uart_service_uuid}"
    characteristic_uuid: "${ble_target_tx_characteristic_uuid}"
    notify: true
    update_interval: 19s
    on_notify:
      component.update: tidal_display

button:
  - platform: template
    id: "BtnRight"
    name: "BtnRight"
    on_press:
      then:
        - ble_client.ble_write:
            id: styria_tux_hat_ble_client
            # uart service
            service_uuid: "${ble_target_uart_service_uuid}"
            # rxd characteristic
            characteristic_uuid: "${ble_target_rx_characteristic_uuid}"
            # List of bytes to write. "right button"
            value: [<insert list of bytes>]  # bytes of string to send
  - platform: template
    id: "LocalFlashlight"
    name: "LocalFlashlight"
    on_press:
      then:
        - script.execute:
            id: toggle_flashlight
  - platform: template
    id: "BtnLeft"
    name: "BtnLeft"
    on_press:
      then:
        - ble_client.ble_write:
            id: styria_tux_hat_ble_client
            # uart service
            service_uuid: "${ble_target_uart_service_uuid}"
            # rxd characteristic
            characteristic_uuid: "${ble_target_rx_characteristic_uuid}"
            # List of bytes to write. "right button"
            value: [<insert list of bytes>]  # bytes of string to send
  - platform: template
    id: "BtnUp"
    name: "BtnUp"
    on_press:
      then:
        - ble_client.ble_write:
            id: styria_tux_hat_ble_client
            # uart service
            service_uuid: "${ble_target_uart_service_uuid}"
            # rxd characteristic
            characteristic_uuid: "${ble_target_rx_characteristic_uuid}"
            # List of bytes to write. "right button"
            value: [<insert list of bytes>]  # bytes of string to send
  - platform: template
    id: "BtnDown"
    name: "BtnDown"
    on_press:
      then:
        - ble_client.ble_write:
            id: styria_tux_hat_ble_client
            # uart service
            service_uuid: "${ble_target_uart_service_uuid}"
            # rxd characteristic
            characteristic_uuid: "${ble_target_rx_characteristic_uuid}"
            # List of bytes to write. "right button"
            value: [<insert list of bytes>]  # bytes of string to send
  - platform: template
    id: "ControlPad1"
    name: "ControlPad1"
    on_press:
      then:
        - ble_client.ble_write:
            id: styria_tux_hat_ble_client
            # uart service
            service_uuid: "${ble_target_uart_service_uuid}"
            # rxd characteristic
            characteristic_uuid: "${ble_target_rx_characteristic_uuid}"
            # List of bytes to write. "right button"
            value: [<insert list of bytes>]  # bytes of string to send
  - platform: template
    id: "ControlPad2"
    name: "ControlPad2"
    on_press:
      then:
        - ble_client.ble_write:
            id: styria_tux_hat_ble_client
            # uart service
            service_uuid: "${ble_target_uart_service_uuid}"
            # rxd characteristic
            characteristic_uuid: "${ble_target_rx_characteristic_uuid}"
            # List of bytes to write. "right button"
            value: [<insert list of bytes>]  # bytes of string to send
  - platform: template
    id: "ControlPad3"
    name: "ControlPad3"
    on_press:
      then:
        - ble_client.ble_write:
            id: styria_tux_hat_ble_client
            # uart service
            service_uuid: "${ble_target_uart_service_uuid}"
            # rxd characteristic
            characteristic_uuid: "${ble_target_rx_characteristic_uuid}"
            # List of bytes to write. "right button"
            value: [<insert list of bytes>]  # bytes of string to send
  - platform: template
    id: "ControlPad4"
    name: "ControlPad4"
    on_press:
      then:
        - ble_client.ble_write:
            id: styria_tux_hat_ble_client
            # uart service
            service_uuid: "${ble_target_uart_service_uuid}"
            # rxd characteristic
            characteristic_uuid: "${ble_target_rx_characteristic_uuid}"
            # List of bytes to write. "right button"
            value: [<insert list of bytes>]  # bytes of string to send

psram:
  mode: octal # quad
  speed: 40MHz

## i2c configuration
i2c:
  sda: 41
  scl: 42
  id: s_i2c
  scan: True

spi:
  clk_pin: 12
  mosi_pin: 11

display:
  - platform: st7789v
    power_supply: lcd_pwr_en
    model: TTGO TDisplay 135x240
    id: tidal_display
    # backlight_pin: 39
    cs_pin: 10
    dc_pin: 13
    reset_pin: 14
    lambda: |-
      it.printf(0, 0, id(roboBfont), "StyriaTuxHat:");
      it.printf(0, 30, id(roboBfont), "%s", id(styria_tux_hat_UART_response).state.c_str());
      it.printf(0, 60, id(roboBfont), "Batt: %0.2f", id(battery_voltage).state);
    rotation: 270Â°


font:
  - file: "gfonts://Roboto"
    id: roboBfont
    size: 20

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: 46
    num_leds: 2
    id: "flashlight_led"
    power_supply: ws2812_led_pwr

power_supply:
  - id: 'ws2812_led_pwr'
    enable_on_boot: true
    pin:
      number: 3
      mode: OUTPUT
      inverted: true
  - id: "lcd_pwr_en"
    enable_on_boot: true
    keep_on_time: 60s
    pin:
      number: 39
      mode: OUTPUT
      inverted: true

globals:
  - id: flashlight_mode
    type: uint32_t
    restore_value: no
    initial_value: '0'

script:
  - id: toggle_flashlight
    mode: single
    then:
      - globals.set:
          id: flashlight_mode
          value: !lambda 'return ((id(flashlight_mode) +1) % 3);'
      - if:
          condition:
            - lambda: |-
                return id(flashlight_mode) == 0;
          then:
            light.turn_off:
              id: flashlight_led
      - if:
          condition:
            - lambda: |-
                return id(flashlight_mode) == 1;
          then:
            light.turn_on:
              id: flashlight_led
              brightness: 50%
              red: 100%
              green: 0%
              blue: 0%
      - if:
          condition:
            - lambda: |-
                return id(flashlight_mode) == 2;
          then:
            light.turn_on:
              id: flashlight_led
              brightness: 100%
              red: 100%
              green: 100%
              blue: 100%

sensor:
  - platform: template
    name: "Battery Voltage"
    id: battery_voltage
    lambda: |-
      pinMode(2, INPUT);
      uint16_t v = analogRead(2);
      pinMode(2, INPUT_PULLUP);
      return v;
    update_interval: 60s
    filters:
      - multiply: 0.00103759765625 # 4.25/4096


binary_sensor:
  - platform: gpio
    pin:
      number: 21
      mode: INPUT
      inverted: True
    name: "Charging Indicator"
    id: charging_indicator
  # - platform: gpio
  #   pin:
  #     number: 0
  #     mode: INPUT_PULLUP
  #     inverted: True
  #     allow_other_uses: true
  #   name: "Btn0"
  #   on_press:
  #     - button.press: ControlPad3
  - platform: gpio
    pin:
      number: 1
      mode: INPUT_PULLUP
      inverted: True
      # allow_other_uses: true
    name: "Btn1"
    on_press:
      - button.press: ControlPad1
  - platform: gpio
    pin:
      number: 2
      mode: INPUT_PULLUP
      inverted: True
      # allow_other_uses: false # also battery measurement
    name: "Btn2"
    on_press:
      - button.press: LocalFlashlight
  - platform: gpio
    pin:
      number: 6
      mode: INPUT_PULLUP
      inverted: True
      # allow_other_uses: true
    name: "Btn3"
    on_press:
      - button.press: ControlPad4
  - platform: gpio
    pin:
      number: 15
      mode: INPUT_PULLUP
      inverted: True
      # allow_other_uses: true
    name: "JoyUp"
    on_press:
      - button.press: BtnUp
  - platform: gpio
    pin:
      number: 16
      mode: INPUT_PULLUP
      inverted: True
      # allow_other_uses: true
    name: "JoyDown"
    on_press:
      - button.press: BtnDown
  - platform: gpio
    pin:
      number: 8
      mode: INPUT_PULLUP
      inverted: True
      # allow_other_uses: true
    name: "JoyLeft"
    on_press:
      - button.press: BtnLeft
  - platform: gpio
    pin:
      number: 7
      mode: INPUT_PULLUP
      inverted: True
      # allow_other_uses: true
    name: "JoyRight"
    on_press:
      - button.press: BtnRight
  - platform: gpio
    pin:
      number: 9
      mode: INPUT_PULLUP
      inverted: True
      # allow_other_uses: true
    name: "JoyCenter"
    on_press:
      - button.press: ControlPad2 ## hat offSuper_L+KEY_RIGHT

# deep_sleep:
#   run_duration: 20s
#   sleep_duration: 2min
#   esp32_ext1_wakeup:
#     pins:
#       - number: 0
#         mode: INPUT_PULLUP
#         inverted: True
#         # allow_other_uses: true
#       - number: 1
#         mode: INPUT_PULLUP
#         inverted: True
#         allow_other_uses: true
#       - number: 6
#         mode: INPUT_PULLUP
#         inverted: True
#         allow_other_uses: true
#       - number: 7
#         mode: INPUT_PULLUP
#         inverted: True
#         allow_other_uses: true
#       - number: 8
#         mode: INPUT_PULLUP
#         inverted: True
#         allow_other_uses: true
#       - number: 9
#         mode: INPUT_PULLUP
#         inverted: True
#         allow_other_uses: true
#       - number: 15
#         mode: INPUT_PULLUP
#         inverted: True
#         allow_other_uses: true
#       - number: 16
#         mode: INPUT_PULLUP
#         inverted: True
#         allow_other_uses: true
#     mode: ANY_HIGH
#   wakeup_pin_mode: INVERT_WAKEUP


# https://github.com/emfcamp/TiDAL-Hardware/tree/main/datasheets
#
## schematics:
# https://github.com/emfcamp/TiDAL-Hardware/blob/main/tilda6/tilda6-top.pdf
# https://github.com/emfcamp/TiDAL-Hardware/blob/main/tilda6/tilda6-bot.pdf

# Display: ER-TFT1.14-1
#   Controller: ST7789VW
#   Interface: SPI
#   135x240 RGB

# button i0: GPIO0
# btn1: GPIO1
# btn2: GPIO2
# LED_PWR: GPIO3
# btn3: GPIO6
# 5-way joystick
# up: GPIO15
# down: GPIO16
# left: GPIO8
# right: GPIO7
# center: GPIO9
# LCD_PWR_EN: 39
# LCD_CS: 10
# LCD_DIN: 11
# LCD_CLK: 12
# LCD_DC: 13
# LCD_RST: 14
# ACCL_INT: 40
# S_I2C_SCL: 41
# S_I2C_SDA: 42
# P_I2C_SCL: 43
# P_I2C_SDA: 44
# WS2812 LEDDATA: 46

# CHARGE_DET: 21 (is it charging?)
# UVLO_TRIG: 51  (schaltet Vbatt weg und auf btn2_in um sie zu messen?)

# PSRAM:
#   CS: 26
#   HD: 27
#   WP: 28
#   CLK: 30
#   Q: 31
#   D: 32


## on S_I2C:
# - QMC7983
# - QMA7981
# - ATECC608A
