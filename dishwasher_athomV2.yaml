## Monitors power consumtion of a diswasher
## and detects when dishwasher has started and finished
#===============================================================================
substitutions:
  device_name: dishwasher
  device_friendly_name: "Geschirrspuehler"
  room_friendly_name: "Kitchen"
#===============================================================================

esphome:
  name: ${device_name}
  platform: ESP8266
  board: esp8285

wifi:
  ssid: !secret iotwifi_name
  password: !secret iotwifi_pass

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_friendly_name} Hotspot"
    password: !secret fallbackwifi_pass

captive_portal:

logger:
  baud_rate: 0

uart:
  rx_pin: GPIO03
  baud_rate: 4800

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_psk

ota:
  password: !secret api_password



globals:
  - id: in_operation_last_started
    type: uint32_t
    restore_value: no
    initial_value: '0'


sensor:
  - platform: cse7766
    current:
      name: "${device_friendly_name} Current"
      id: "sensor_current"
      filters:
        - lambda: "return ((x < 0.5)? 0.0 : x);"
        - calibrate_linear:
            - 0 -> 0
            - 2.58 -> 2.6
    voltage:
      name: "${device_friendly_name} Voltage"
      filters:
        offset: -1.1
    power:
      name: "${device_friendly_name} Power"
      id: "sensor_power"
      filters:
        - lambda: "return ((x < 0.6)? 0.0 : x);"
        - calibrate_linear:
            - 0 -> 0
            - 583 -> 594
    energy:
      name: "${device_friendly_name} Energy"
    update_interval: 20s
  - platform: template
    name: "${device_friendly_name} last operating duration"
    id: sensor_last_operating_duration
  - platform: template
    name: "${device_friendly_name} current operating duration"
    id: sensor_current_operating_duration
    update_interval: 10s
    lambda: |-
      if (id(sensor_device_in_operation).state)
        return (millis() - in_operation_last_started->value())/1000;
      else
        return 0;


binary_sensor:
  - platform: gpio
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
      inverted: True
    name: "${device_friendly_name} Button"
    on_press:
      - switch.toggle: relayswitch
  - platform: status
    name: "${device_friendly_name} Status"
  - platform: template
    name: "${device_friendly_name} in operation"
    id: sensor_device_in_operation
    device_class: running
    lambda: |-
      return (id(relayswitch).state) && (id(sensor_power).state > 50);
    filters:
      - delayed_off: 50min
        ### warning: actually, after the last heating phase, the dishwasher will draw 0W for 48min and then use the pump one last time at 60W
    on_press:
      then:
      - globals.set:
          id: in_operation_last_started
          value: !lambda 'return millis();'
    on_release:
      then:
      - sensor.template.publish:
          id: sensor_last_operating_duration
          state: !lambda 'return (millis() - in_operation_last_started->value())/1000;'

output:
  - platform: gpio
    pin: GPIO12
    id: relay

button:
  - platform: restart
    name: "Restart ${device_friendly_name}"

switch:
  - platform: output
    name: "${device_friendly_name} Relay"
    output: relay
    id: relayswitch
    icon: mdi:dishwasher

status_led:
  pin:
    number: GPIO13
    inverted: yes

